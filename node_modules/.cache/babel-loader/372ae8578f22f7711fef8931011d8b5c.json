{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\lyvie\\\\Desktop\\\\gastromatic\\\\moviedb_ui_challenge\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\Users\\\\lyvie\\\\Desktop\\\\gastromatic\\\\moviedb_ui_challenge\\\\src\\\\components\\\\App.js\";\nimport React, { useEffect, useState, useRef } from \"react\";\nimport axios from \"axios\";\nimport { TMDB_API_KEY } from \"../api/key\";\nimport Movie from \"./Movie\";\nimport { Search } from \"react-feather\";\nexport default function App() {\n  var _this = this;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      data = _useState2[0],\n      setData = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      loading = _useState4[0],\n      setLoading = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      queryText = _useState6[0],\n      setQueryText = _useState6[1];\n\n  var _useState7 = useState(\" \"),\n      _useState8 = _slicedToArray(_useState7, 2),\n      query = _useState8[0],\n      setQuery = _useState8[1];\n\n  var searchInput = useRef(null);\n  useEffect(function () {\n    searchInput.current.focus();\n  }, []);\n  useEffect(function () {\n    axios.get(\"https://api.themoviedb.org/3/search/movie?api_key=\".concat(TMDB_API_KEY, \"&language=en-US&query=\").concat(query, \"&page=1&include_adult=false&840\")).then(function (res) {\n      setData(res.data.results);\n    }).catch(function (error) {\n      console.log(error);\n    });\n  }, [query]);\n  useEffect(function () {\n    setLoading(false);\n  }, [data]);\n  useEffect(function () {\n    if (loading) {\n      setQuery(searchInput.current.value);\n    }\n  }, [loading]);\n\n  var onSubmit = function onSubmit(event) {\n    setLoading(true);\n    event.preventDefault();\n  };\n\n  var movieListHtmlElement = data && data.length ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"movieList\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }\n  }, data.map(function (item) {\n    return /*#__PURE__*/React.createElement(Movie, {\n      key: item.id,\n      movie: item,\n      className: \"movie\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }\n    });\n  })) : /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, \"Bitte suche etwas\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"App\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    className: \"title\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"title__movie\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }, \"Movie\"), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 9\n    }\n  }, \"DB\")), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: onSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"text\",\n    name: \"search\",\n    placeholder: \"Type in search query...\",\n    className: \"search\",\n    value: queryText,\n    ref: searchInput,\n    onChange: function onChange(e) {\n      return setQueryText(e.value);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Search, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  })), loading ? /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 18\n    }\n  }, \"Loading...\") : movieListHtmlElement);\n}","map":{"version":3,"sources":["C:/Users/lyvie/Desktop/gastromatic/moviedb_ui_challenge/src/components/App.js"],"names":["React","useEffect","useState","useRef","axios","TMDB_API_KEY","Movie","Search","App","data","setData","loading","setLoading","queryText","setQueryText","query","setQuery","searchInput","current","focus","get","then","res","results","catch","error","console","log","value","onSubmit","event","preventDefault","movieListHtmlElement","length","map","item","id","e"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,MAArC,QAAmD,OAAnD;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,YAAT,QAA6B,YAA7B;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,MAAT,QAAuB,eAAvB;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAAA,kBACJN,QAAQ,CAAC,IAAD,CADJ;AAAA;AAAA,MACrBO,IADqB;AAAA,MACfC,OADe;;AAAA,mBAEER,QAAQ,CAAC,KAAD,CAFV;AAAA;AAAA,MAErBS,OAFqB;AAAA,MAEZC,UAFY;;AAAA,mBAGMV,QAAQ,CAAC,EAAD,CAHd;AAAA;AAAA,MAGrBW,SAHqB;AAAA,MAGVC,YAHU;;AAAA,mBAIFZ,QAAQ,CAAC,GAAD,CAJN;AAAA;AAAA,MAIrBa,KAJqB;AAAA,MAIdC,QAJc;;AAM5B,MAAMC,WAAW,GAAGd,MAAM,CAAC,IAAD,CAA1B;AAEAF,EAAAA,SAAS,CAAC,YAAM;AACdgB,IAAAA,WAAW,CAACC,OAAZ,CAAoBC,KAApB;AACD,GAFQ,EAEN,EAFM,CAAT;AAIAlB,EAAAA,SAAS,CAAC,YAAM;AACdG,IAAAA,KAAK,CACFgB,GADH,6DAEyDf,YAFzD,mCAE8FU,KAF9F,sCAIGM,IAJH,CAIQ,UAACC,GAAD,EAAS;AACbZ,MAAAA,OAAO,CAACY,GAAG,CAACb,IAAJ,CAASc,OAAV,CAAP;AACD,KANH,EAOGC,KAPH,CAOS,UAACC,KAAD,EAAW;AAChBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD,KATH;AAUD,GAXQ,EAWN,CAACV,KAAD,CAXM,CAAT;AAaAd,EAAAA,SAAS,CAAC,YAAM;AACdW,IAAAA,UAAU,CAAC,KAAD,CAAV;AACD,GAFQ,EAEN,CAACH,IAAD,CAFM,CAAT;AAIAR,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIU,OAAJ,EAAa;AACXK,MAAAA,QAAQ,CAACC,WAAW,CAACC,OAAZ,CAAoBU,KAArB,CAAR;AACD;AACF,GAJQ,EAIN,CAACjB,OAAD,CAJM,CAAT;;AAMA,MAAMkB,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAW;AAC1BlB,IAAAA,UAAU,CAAC,IAAD,CAAV;AACAkB,IAAAA,KAAK,CAACC,cAAN;AACD,GAHD;;AAKA,MAAMC,oBAAoB,GACxBvB,IAAI,IAAIA,IAAI,CAACwB,MAAb,gBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGxB,IAAI,CAACyB,GAAL,CAAS,UAACC,IAAD;AAAA,wBACR,oBAAC,KAAD;AAAO,MAAA,GAAG,EAAEA,IAAI,CAACC,EAAjB;AAAqB,MAAA,KAAK,EAAED,IAA5B;AAAkC,MAAA,SAAS,EAAC,OAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADQ;AAAA,GAAT,CADH,CADF,gBAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yBARJ;AAWA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAI,IAAA,SAAS,EAAC,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAM,IAAA,EAAE,EAAC,cAAT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aADF,eAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAFF,CADF,eAKE;AAAM,IAAA,QAAQ,EAAEN,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AACE,IAAA,IAAI,EAAC,MADP;AAEE,IAAA,IAAI,EAAC,QAFP;AAGE,IAAA,WAAW,EAAC,yBAHd;AAIE,IAAA,SAAS,EAAC,QAJZ;AAKE,IAAA,KAAK,EAAEhB,SALT;AAME,IAAA,GAAG,EAAEI,WANP;AAOE,IAAA,QAAQ,EAAE,kBAACoB,CAAD;AAAA,aAAOvB,YAAY,CAACuB,CAAC,CAACT,KAAH,CAAnB;AAAA,KAPZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAUE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAVF,CALF,EAkBGjB,OAAO,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAH,GAAuBqB,oBAlBjC,CADF;AAsBD","sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\r\nimport axios from \"axios\";\r\nimport { TMDB_API_KEY } from \"../api/key\";\r\nimport Movie from \"./Movie\";\r\nimport { Search } from \"react-feather\";\r\n\r\nexport default function App() {\r\n  const [data, setData] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [queryText, setQueryText] = useState(\"\");\r\n  const [query, setQuery] = useState(\" \");\r\n\r\n  const searchInput = useRef(null);\r\n\r\n  useEffect(() => {\r\n    searchInput.current.focus();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(\r\n        `https://api.themoviedb.org/3/search/movie?api_key=${TMDB_API_KEY}&language=en-US&query=${query}&page=1&include_adult=false&840`\r\n      )\r\n      .then((res) => {\r\n        setData(res.data.results);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n      });\r\n  }, [query]);\r\n\r\n  useEffect(() => {\r\n    setLoading(false);\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    if (loading) {\r\n      setQuery(searchInput.current.value);\r\n    }\r\n  }, [loading]);\r\n\r\n  const onSubmit = (event) => {\r\n    setLoading(true);\r\n    event.preventDefault();\r\n  };\r\n\r\n  const movieListHtmlElement =\r\n    data && data.length ? (\r\n      <div className=\"movieList\">\r\n        {data.map((item) => (\r\n          <Movie key={item.id} movie={item} className=\"movie\" />\r\n        ))}\r\n      </div>\r\n    ) : (\r\n      <span>Bitte suche etwas</span>\r\n    );\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"title\">\r\n        <span id=\"title__movie\">Movie</span>\r\n        <span>DB</span>\r\n      </h1>\r\n      <form onSubmit={onSubmit}>\r\n        <input\r\n          type=\"text\"\r\n          name=\"search\"\r\n          placeholder=\"Type in search query...\"\r\n          className=\"search\"\r\n          value={queryText}\r\n          ref={searchInput}\r\n          onChange={(e) => setQueryText(e.value)}\r\n        />\r\n        <Search />\r\n        {/*<input type=\"submit\" value=\"Suchen\" className=\"search-submit\" />*/}\r\n      </form>\r\n      {loading ? <p>Loading...</p> : movieListHtmlElement}\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}